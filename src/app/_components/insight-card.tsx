// A generic icon for any new opportunity type
const CodeIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    className="h-6 w-6 text-gray-400"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
    strokeWidth={2}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"
    />
  </svg>
);

// Language/Framework specific icons
const PythonIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    className="h-6 w-6 text-blue-400"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M9 17l-5-5 5-5m6 10l5-5-5-5"
    />
  </svg>
);
const ReactIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    className="h-6 w-6 text-cyan-400"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M12 8v8m-4-4h8"
    />
  </svg>
);

type Insight = {
  title: string;
  problem: string;
  solution: string;
  file: string;
  line: number;
  // The 'type' is now a dynamic string generated by the AI
  type: string;
};

export default function InsightCard({ insight }: { insight: Insight }) {
  // This function now dynamically selects an icon based on keywords in the title or file
  const getIcon = () => {
    const lowerCaseTitle = insight.title.toLowerCase();
    const lowerCaseFile = insight.file.toLowerCase();

    if (lowerCaseFile.endsWith(".py")) return <PythonIcon />;
    if (
      lowerCaseTitle.includes("react") ||
      lowerCaseFile.includes(".jsx") ||
      lowerCaseFile.includes(".tsx")
    )
      return <ReactIcon />;

    // Fallback for any other type of issue
    return <CodeIcon />;
  };

  return (
    <div className="mb-6 rounded-lg border border-gray-700 bg-gray-800/50 shadow-lg transition-all hover:border-purple-500/50 hover:shadow-purple-900/20">
      <div className="flex items-center gap-4 border-b border-gray-700 p-4">
        <div className="flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-full bg-gray-700/50">
          {getIcon()}
        </div>
        <div>
          <h3 className="text-lg font-semibold text-white">{insight.title}</h3>
          <p className="font-mono text-sm text-gray-400">
            {insight.file}, line {insight.line}
          </p>
        </div>
      </div>
      <div className="space-y-4 p-6">
        <div>
          <h4 className="mb-2 font-semibold text-gray-300">The Problem</h4>
          <p className="text-gray-400">{insight.problem}</p>
        </div>
        <div>
          <h4 className="mb-2 font-semibold text-gray-300">
            The Recommended Solution
          </h4>
          <p className="whitespace-pre-line text-gray-400">
            {insight.solution}
          </p>
        </div>
      </div>
    </div>
  );
}
