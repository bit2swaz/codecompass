// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Core model for a user who logs in.
// NextAuth.js will manage the link between User and Account.
model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    analyses      Analysis[] // A user can have many analyses
}

// NextAuth.js model for handling different OAuth providers (e.g., GitHub)
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// Model to store the results of a code analysis
model Analysis {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    repoUrl String
    status  AnalysisStatus @default(PENDING) // Tracks the state of the job

    // The final JSON output from our analysis engine
    results Json?

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enum for the status of an analysis job
enum AnalysisStatus {
    PENDING
    COMPLETED
    FAILED
}
